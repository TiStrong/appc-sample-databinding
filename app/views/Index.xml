<Alloy>
  <!-- We're including the global (not instance) collection Fruit here. It is referencing the file app/models/Fruit.js -->
  <Collection src="Fruit" />
  <!-- The open source xp.ui commonjs module is used here to make NavigationWindow cross platform. 
       See app/lib/xp.ui.js for details and link to GitHub repository. -->
  <NavigationWindow id="navWin">
    <Window class="windowStyling">
      <View id="filterWrapper">
        <Button id="filterButton" onClick="showFilterDialog" />
        <Button id="sortButton" onClick="showSortDialog" />
      </View>
      
      <!-- The defaultItemTemplate refers to the template section below. You can see one template there with the name "fruit".
           By setting this you don't need to set a template property for every ListItem. --> 
      <ListView defaultItemTemplate="fruit" onItemclick="handleClickItem" id="fruitLV">
        
        <Templates>
          <ItemTemplate name="fruit">
            <!-- A wrapper view in a template is useful for controlling the styling inside a row. -->
            <View id="fruitTemplateWrapper">
              <Label id="name" bindId="name" />
              <Label id="amount" bindId="amount" />
              <View id="color" bindId="color" />
            </View>
          </ItemTemplate>
        </Templates>
        
        <!-- In the line below is where all the magic happens. 
             dataCollection:  references the global Collection as included on line 3
             dataTransform: A function (defined in index.js) that can transform a model to the proper data you want to display.
                            This function is optional, by default it will just look into the model, but doing this allows you to
                            manipulate the data before rendering it. See index.js how it works
              dataFilter: A function defined in index.js to filter data (don't display all models in the collection, only those that you want)
              dataFunction: A function generated by Alloy you can call to trigger a re-render of the list. Useful for when the filter changes.
                            Any model changes you apply will trigger re-render automatically. 
         -->
        <ListSection dataCollection="Fruit" dataTransform="transformFruit" dataFilter="filterFruit" dataFunction="rerenderList">
          
          <!-- This item is repeated for every model in the Fruit collection. The bound variables ({name} etc) reference the data
               returned in the tranform function. If transform wouldn't be there, then it would reference the model properties. -->
          <ListItem
            name:text="{name}"
            amount:text="{amount}"
            color:backgroundColor="{color}"
            accessoryType="{accessoryType}"
            itemId="{itemId}"
          />
        </ListSection>
      </ListView>
    </Window>
  </NavigationWindow>

  <OptionDialog id="sortDialog" onClick="handleSortDialog">
    <Options>
      <Option>Name</Option>
      <Option>Amount</Option>
    </Options>
  </OptionDialog>

  <OptionDialog id="filterDialog" onClick="filterSortDialog">
    <Options>
      <Option>All</Option>
      <Option>Fruit</Option>
      <Option>Vegetables</Option>
    </Options>
  </OptionDialog>
    
</Alloy>
